/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package spiderman;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ZxoR (Yonatan)
 */
public class main extends javax.swing.JFrame {

    final Object lock = new Object();
    final JFileChooser fc = new JFileChooser();
    ArrayList<Thread> threads;
    int statsscanned = 0; //how much scanned pages.
    int alreadyhasit = 0;
    DefaultTableModel agentsmodel;
    long[] tasktime;

    public main() {
        initComponents();
        threads = new ArrayList<Thread>();
        queueList.add("http://www.fxp.co.il/");
        queueList.add("http://stackoverflow.com/questions/7042762/easier-way-to-synchronize-2-threads-in-java");
        queueList.add("http://www.hometheater.co.il");
        agentsmodel = (DefaultTableModel) agentsTable.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        queueList = new java.awt.List();
        emailsFound = new java.awt.List();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        statThreads = new javax.swing.JButton();
        knownList = new java.awt.List();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jButton4 = new javax.swing.JButton();
        statsLable = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        agentsTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        statThreads.setText("Start threads");
        statThreads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statThreadsActionPerformed(evt);
            }
        });

        jButton2.setText("Suspend threads");
        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Unsuspend threads");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Emails found:");

        jLabel2.setText("Queue:");

        jSlider1.setMaximum(4);
        jSlider1.setMinimum(1);
        jSlider1.setValue(3);

        jButton4.setText("Destroy threads");

        statsLable.setText("Statistics:");

        agentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Job", "Speed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        agentsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(agentsTable);
        if (agentsTable.getColumnModel().getColumnCount() > 0) {
            agentsTable.getColumnModel().getColumn(0).setResizable(false);
            agentsTable.getColumnModel().getColumn(0).setPreferredWidth(20);
            agentsTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jButton1.setText("Save emails to file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(emailsFound, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton1))
                                    .addComponent(queueList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statThreads)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 426, Short.MAX_VALUE))
                    .addComponent(knownList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statsLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(emailsFound, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(queueList, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(statThreads)
                        .addComponent(jButton2)
                        .addComponent(jButton3)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(knownList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statsLable)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void statThreadsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statThreadsActionPerformed
        tasktime = new long[jSlider1.getValue()];
        agentsmodel.setRowCount(0);
        for (int i = 0; i < jSlider1.getValue(); i++) {
            threads.add(new Thread(new Task(i)));
            agentsmodel.addRow(new Object[]{i, "Created", "---"});
        }
        for (Thread thread : threads) {
            thread.start();
        }

    }//GEN-LAST:event_statThreadsActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int x = 0;
        for (Thread thread : threads) {
            thread.suspend();

            agentsmodel.setValueAt("Suspended", x, 1);
            agentsmodel.setValueAt("---", x, 2);
            x++;
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (Thread thread : threads) {
            thread.resume();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            PrintWriter writer = null;
            try {
                File file = fc.getSelectedFile();
                writer = new PrintWriter(file, "UTF-8");
                for (int i = 0; i <= (emailsFound.getItemCount() -1); i++) {
                    writer.println(emailsFound.getItem(i));
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                writer.close();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable agentsTable;
    private java.awt.List emailsFound;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.List knownList;
    private java.awt.List queueList;
    private javax.swing.JButton statThreads;
    private javax.swing.JLabel statsLable;
    // End of variables declaration//GEN-END:variables
   public String getHTML(String urlToRead) throws MalformedURLException {
        URL url;
        HttpURLConnection conn;
        BufferedReader rd;
        String line;
        String result = "";
        url = new URL(urlToRead);
        try {
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            while ((line = rd.readLine()) != null) {
                result += line;
            }
            rd.close();
            conn.disconnect();
            System.gc();
        } catch (Exception e) {
            System.err.println("getHTML exception when trying to read: " + url + ". ERROR MESSAGE: " + e.getMessage().toString());
        }
        return result;
    }

    public boolean isInList(java.awt.List list, String string) {
        for (int x = 0; x < list.getItemCount(); x++) {
            if (list.getItem(x).equals(string)) {
                return true;
            }
        }
        return false;
    }

    public void extracturls(String sourceCode, String originalurl) throws MalformedURLException {
        Pattern p = Pattern.compile("href=\"(.*?)\"");
        Matcher m = p.matcher(sourceCode);
        String url;
        while (m.find()) {
            if (!m.group(1).contains("#")) {
                if ((m.group(1).toString().contains(".html")) || (m.group(1).toString().contains(".php"))) {
                    URL aURL = new URL(originalurl);
                    url = m.group(1); // this variable should contain the link URL
                    if (url.startsWith("/")) {
                        url = "http://" + aURL.getHost() + url;
                    } else if (!url.startsWith("http://")) {
                        url = "http://" + aURL.getHost() + "/" + url; //problem with HTTPS and ftp:// and ssh:// and smb:// ftps:// ---- PORTS???
                    }
                    if (!isInList(knownList, url)) {
                        queueList.add(url);
                        knownList.add(url);
                    } else {
                        alreadyhasit++;
                    }
                }
            }
        }
    }

    public void updateStats() {
        long total = 0;
        for (int x = 0; x < tasktime.length; x++) {
            System.out.println(total + " += " + tasktime[x] + " = " + (total + tasktime[x]));
            total += tasktime[x];
        }
        total = total / tasktime.length;
        total = (TimeUnit.MINUTES.toNanos(1) / total) * tasktime.length;
        statsLable.setText("Statistics: Threads running:" + threads.size() + ". Queued: " + queueList.countItems() + ". Emails found: " + emailsFound.countItems() + ". Cached: " + knownList.countItems() + ". Already scanned: " + statsscanned + ". Denied: " + alreadyhasit + "Approximate thread time: " + total + "T/pm");
    }

    public void extractemails(String sourceCode) {
        Pattern p = Pattern.compile("([a-zA-Z0-9.]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,5})))");
        Matcher m = p.matcher(sourceCode);
        String email = null;
        while (m.find()) {
            email = m.group(1); // this variable should contain the link URL
            if (!isInList(emailsFound, email)) {
                emailsFound.add(email);
            }
        }
    }

    class Task extends Thread {

        int id;

        public Task(int i) {
            this.id = i;
        }

        @Override
        public void run() {
            String url;
            String source;
            long ctime;
            agentsmodel.setValueAt("Starting", id, 1);
            while (true) {
                ctime = System.nanoTime();
                try {
                    agentsmodel.setValueAt("Working", id, 1);
                    //Thread.sleep(id * 1000);
                    synchronized (lock) {
                        if (queueList.getItemCount() > 0) {
                            url = queueList.getItem(0);
                            queueList.delItem(0);
                        } else {
                            url = "http://www.fxp.co.il/";
                        }
                    }
                    source = getHTML(url);
                    System.out.println("Thread number " + id + " has runned and going to " + url);
                    try {
                        extracturls(source, url);
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    extractemails(source);
                    jTextArea1.setText(url + "\n");
                    jTextArea1.append(source);
                    statsscanned++;
                    System.out.println("calc " + System.nanoTime() + " - " + ctime + " = " + (System.nanoTime() - ctime));
                    tasktime[id] = (System.nanoTime() - ctime);
                    agentsmodel.setValueAt((TimeUnit.MINUTES.toNanos(1) / tasktime[id]) + "T/pm", id, 2);
                    updateStats();
                    try {
                        System.out.println("Thread number " + id + " has appended and going to sleep for 1 secs.");
                        agentsmodel.setValueAt("Sleeping", id, 1);
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        System.err.println("thread id: " + id + " exception when trying to proccess " + url + ". ERROR MESSAGE: " + ex.getMessage().toString());
                    }
                } catch (MalformedURLException ex) {
                    System.err.println("thread id: " + id + " exception when trying to proccess everything. ERROR MESSAGE: " + ex.getMessage().toString());
                }
                //report my timer per thread
            }
        }
    }
}
